package de.hsbi.binex.binex_backend.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class SimpleNFT extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200287b3803806200287b833981016040819052620000349162000197565b81818181600062000046838262000290565b50600162000055828262000290565b505050620000726200006c6200007c60201b60201c565b62000080565b505050506200035c565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000fa57600080fd5b81516001600160401b0380821115620001175762000117620000d2565b604051601f8301601f19908116603f01168101908282118183101715620001425762000142620000d2565b816040528381526020925086838588010111156200015f57600080fd5b600091505b8382101562000183578582018301518183018401529082019062000164565b600093810190920192909252949350505050565b60008060408385031215620001ab57600080fd5b82516001600160401b0380821115620001c357600080fd5b620001d186838701620000e8565b93506020850151915080821115620001e857600080fd5b50620001f785828601620000e8565b9150509250929050565b600181811c908216806200021657607f821691505b6020821081036200023757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200028b57600081815260208120601f850160051c81016020861015620002665750805b601f850160051c820191505b81811015620002875782815560010162000272565b5050505b505050565b81516001600160401b03811115620002ac57620002ac620000d2565b620002c481620002bd845462000201565b846200023d565b602080601f831160018114620002fc5760008415620002e35750858301515b600019600386901b1c1916600185901b17855562000287565b600085815260208120601f198616915b828110156200032d578886015182559484019460019091019084016200030c565b50858210156200034c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61250f806200036c6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636352211e116100f95780639f6ed25f11610097578063b88d4fde11610071578063b88d4fde146103b2578063c87b56dd146103c5578063e985e9c5146103d8578063f2fde38b146103eb57600080fd5b80639f6ed25f14610379578063a22cb4651461038c578063b1a614891461039f57600080fd5b806379cc6790116100d357806379cc67901461032d5780638c7a63ae146103405780638da5cb5b1461036057806395d89b411461037157600080fd5b80636352211e146102ff57806370a0823114610312578063715018a61461032557600080fd5b806318160ddd116101665780633eecdede116101405780633eecdede1461029957806342842e0e146102b95780634f6ccce7146102cc578063519dc8d2146102df57600080fd5b806318160ddd1461026157806323b872dd146102735780632f745c591461028657600080fd5b806301ffc9a7146101ae57806306fdde03146101d6578063081812fc146101eb5780630823c56214610216578063095ea7b314610239578063162094c41461024e575b600080fd5b6101c16101bc366004611cbb565b6103fe565b60405190151581526020015b60405180910390f35b6101de610429565b6040516101cd9190611d28565b6101fe6101f9366004611d3b565b6104bb565b6040516001600160a01b0390911681526020016101cd565b6101c1610224366004611d70565b600c6020526000908152604090205460ff1681565b61024c610247366004611d8b565b6104e2565b005b61024c61025c366004611dfe565b6105fc565b6009545b6040519081526020016101cd565b61024c610281366004611e4a565b610644565b610265610294366004611d8b565b610675565b6102ac6102a7366004611e86565b61070b565b6040516101cd9190611efb565b61024c6102c7366004611e4a565b6107c2565b6102656102da366004611d3b565b6107dd565b6102f26102ed366004611d70565b610870565b6040516101cd9190611f5d565b6101fe61030d366004611d3b565b61090a565b610265610320366004611d70565b61096a565b61024c6109f0565b61024c61033b366004611d8b565b610a04565b61035361034e366004611d3b565b610ab7565b6040516101cd9190611fa1565b6006546001600160a01b03166101fe565b6101de610b1d565b61024c610387366004611fe8565b610b2c565b61024c61039a366004612042565b610c06565b61024c6103ad366004612042565b610c11565b61024c6103c0366004612094565b610c44565b6101de6103d3366004611d3b565b610c76565b6101c16103e6366004612170565b610c81565b61024c6103f9366004611d70565b610caf565b60006001600160e01b031982166342149c7b60e01b1480610423575061042382610d28565b92915050565b606060008054610438906121a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610464906121a3565b80156104b15780601f10610486576101008083540402835291602001916104b1565b820191906000526020600020905b81548152906001019060200180831161049457829003601f168201915b5050505050905090565b60006104c682610d4d565b506000908152600460205260409020546001600160a01b031690565b60006104ed8261090a565b9050806001600160a01b0316836001600160a01b03160361055f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061057b575061057b8133610c81565b6105ed5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610556565b6105f78383610dac565b505050565b610604610e1a565b6105f78383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e7492505050565b61064e3382610f07565b61066a5760405162461bcd60e51b8152600401610556906121dd565b6105f7838383610f66565b60006106808361096a565b82106106e25760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610556565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b606060008267ffffffffffffffff8111156107285761072861207e565b60405190808252806020026020018201604052801561075b57816020015b60608152602001906001900390816107465790505b50905060005b838110156107ba5761078a85858381811061077e5761077e61222a565b90506020020135610c76565b82828151811061079c5761079c61222a565b602002602001018190525080806107b290612256565b915050610761565b509392505050565b6105f783838360405180602001604052806000815250610c44565b60006107e860095490565b821061084b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610556565b6009828154811061085e5761085e61222a565b90600052602060002001549050919050565b6060600061087d8361096a565b905060008167ffffffffffffffff81111561089a5761089a61207e565b6040519080825280602002602001820160405280156108c3578160200160208202803683370190505b50905060005b828110156107ba576108db8582610675565b8282815181106108ed576108ed61222a565b60209081029190910101528061090281612256565b9150506108c9565b6000818152600260205260408120546001600160a01b0316806104235760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610556565b60006001600160a01b0382166109d45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610556565b506001600160a01b031660009081526003602052604090205490565b6109f8610e1a565b610a0260006110d7565b565b816001600160a01b0316610a178261090a565b6001600160a01b0316148015610a5e57506001600160a01b038216331480610a5e575033610a44826104bb565b6001600160a01b03161480610a5e5750610a5e8233610c81565b610aaa5760405162461bcd60e51b815260206004820152601760248201527f53696d706c654e46543a206e6f7420617070726f7665640000000000000000006044820152606401610556565b610ab381611129565b5050565b610ae46040518060600160405280600081526020016060815260200160006001600160a01b031681525090565b6040518060600160405280838152602001610afe84610c76565b8152602001610b0c8461090a565b6001600160a01b0316905292915050565b606060018054610438906121a3565b336000908152600c602052604090205460ff161515600114610bb65760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79206d61696e7461696e6572732068617665207065726d697373696f6e60448201527f20746f2063616c6c20746869732066756e6374696f6e2e0000000000000000006064820152608401610556565b610bc08484611132565b610c008383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e7492505050565b50505050565b610ab33383836112cb565b610c19610e1a565b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b610c4e3383610f07565b610c6a5760405162461bcd60e51b8152600401610556906121dd565b610c0084848484611399565b6060610423826113cc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610cb7610e1a565b6001600160a01b038116610d1c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610556565b610d25816110d7565b50565b60006001600160e01b0319821663780e9d6360e01b14806104235750610423826114d4565b6000818152600260205260409020546001600160a01b0316610d255760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610556565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610de18261090a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b03163314610a025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610556565b6000828152600260205260409020546001600160a01b0316610eef5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610556565b6000828152600b602052604090206105f782826122bd565b600080610f138361090a565b9050806001600160a01b0316846001600160a01b03161480610f3a5750610f3a8185610c81565b80610f5e5750836001600160a01b0316610f53846104bb565b6001600160a01b0316145b949350505050565b826001600160a01b0316610f798261090a565b6001600160a01b031614610f9f5760405162461bcd60e51b81526004016105569061237d565b6001600160a01b0382166110015760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610556565b61100e8383836001611524565b826001600160a01b03166110218261090a565b6001600160a01b0316146110475760405162461bcd60e51b81526004016105569061237d565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610d2581611530565b6001600160a01b0382166111885760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610556565b6000818152600260205260409020546001600160a01b0316156111ed5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610556565b6111fb600083836001611524565b6000818152600260205260409020546001600160a01b0316156112605760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610556565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b03160361132c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610556565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6113a4848484610f66565b6113b084848484611570565b610c005760405162461bcd60e51b8152600401610556906123c2565b60606113d782610d4d565b6000828152600b6020526040812080546113f0906121a3565b80601f016020809104026020016040519081016040528092919081815260200182805461141c906121a3565b80156114695780601f1061143e57610100808354040283529160200191611469565b820191906000526020600020905b81548152906001019060200180831161144c57829003601f168201915b50505050509050600061148760408051602081019091526000815290565b90508051600003611499575092915050565b8151156114cb5780826040516020016114b3929190612414565b60405160208183030381529060405292505050919050565b610f5e84611671565b60006001600160e01b031982166380ac58cd60e01b148061150557506001600160e01b03198216635b5e139f60e01b145b8061042357506301ffc9a760e01b6001600160e01b0319831614610423565b610c00848484846116e5565b611539816116f1565b6000818152600b602052604090208054611552906121a3565b159050610d25576000818152600b60205260408120610d2591611c57565b60006001600160a01b0384163b1561166657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906115b4903390899088908890600401612443565b6020604051808303816000875af19250505080156115ef575060408051601f3d908101601f191682019092526115ec91810190612480565b60015b61164c573d80801561161d576040519150601f19603f3d011682016040523d82523d6000602084013e611622565b606091505b5080516000036116445760405162461bcd60e51b8152600401610556906123c2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610f5e565b506001949350505050565b606061167c82610d4d565b600061169360408051602081019091526000815290565b905060008151116116b357604051806020016040528060008152506116de565b806116bd84611794565b6040516020016116ce929190612414565b6040516020818303038152906040525b9392505050565b610c0084848484611827565b60006116fc8261090a565b905061170c816000846001611524565b6117158261090a565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b606060006117a183611967565b600101905060008167ffffffffffffffff8111156117c1576117c161207e565b6040519080825280601f01601f1916602001820160405280156117eb576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846117f557509392505050565b61183384848484611a3f565b60018111156118a25760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610556565b816001600160a01b0385166118fe576118f981600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b611921565b836001600160a01b0316856001600160a01b031614611921576119218582611ac7565b6001600160a01b03841661193d5761193881611b64565b611960565b846001600160a01b0316846001600160a01b031614611960576119608482611c13565b5050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106119a65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106119d2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106119f057662386f26fc10000830492506010015b6305f5e1008310611a08576305f5e100830492506008015b6127108310611a1c57612710830492506004015b60648310611a2e576064830492506002015b600a83106104235760010192915050565b6001811115610c00576001600160a01b03841615611a85576001600160a01b03841660009081526003602052604081208054839290611a7f90849061249d565b90915550505b6001600160a01b03831615610c00576001600160a01b03831660009081526003602052604081208054839290611abc9084906124b0565b909155505050505050565b60006001611ad48461096a565b611ade919061249d565b600083815260086020526040902054909150808214611b31576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090611b769060019061249d565b6000838152600a602052604081205460098054939450909284908110611b9e57611b9e61222a565b906000526020600020015490508060098381548110611bbf57611bbf61222a565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480611bf757611bf76124c3565b6001900381819060005260206000200160009055905550505050565b6000611c1e8361096a565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b508054611c63906121a3565b6000825580601f10611c73575050565b601f016020900490600052602060002090810190610d2591905b80821115611ca15760008155600101611c8d565b5090565b6001600160e01b031981168114610d2557600080fd5b600060208284031215611ccd57600080fd5b81356116de81611ca5565b60005b83811015611cf3578181015183820152602001611cdb565b50506000910152565b60008151808452611d14816020860160208601611cd8565b601f01601f19169290920160200192915050565b6020815260006116de6020830184611cfc565b600060208284031215611d4d57600080fd5b5035919050565b80356001600160a01b0381168114611d6b57600080fd5b919050565b600060208284031215611d8257600080fd5b6116de82611d54565b60008060408385031215611d9e57600080fd5b611da783611d54565b946020939093013593505050565b60008083601f840112611dc757600080fd5b50813567ffffffffffffffff811115611ddf57600080fd5b602083019150836020828501011115611df757600080fd5b9250929050565b600080600060408486031215611e1357600080fd5b83359250602084013567ffffffffffffffff811115611e3157600080fd5b611e3d86828701611db5565b9497909650939450505050565b600080600060608486031215611e5f57600080fd5b611e6884611d54565b9250611e7660208501611d54565b9150604084013590509250925092565b60008060208385031215611e9957600080fd5b823567ffffffffffffffff80821115611eb157600080fd5b818501915085601f830112611ec557600080fd5b813581811115611ed457600080fd5b8660208260051b8501011115611ee957600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611f5057603f19888603018452611f3e858351611cfc565b94509285019290850190600101611f22565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611f9557835183529284019291840191600101611f79565b50909695505050505050565b60208152815160208201526000602083015160606040840152611fc76080840182611cfc565b604094909401516001600160a01b0316606093909301929092525090919050565b60008060008060608587031215611ffe57600080fd5b61200785611d54565b935060208501359250604085013567ffffffffffffffff81111561202a57600080fd5b61203687828801611db5565b95989497509550505050565b6000806040838503121561205557600080fd5b61205e83611d54565b91506020830135801515811461207357600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156120aa57600080fd5b6120b385611d54565b93506120c160208601611d54565b925060408501359150606085013567ffffffffffffffff808211156120e557600080fd5b818701915087601f8301126120f957600080fd5b81358181111561210b5761210b61207e565b604051601f8201601f19908116603f011681019083821181831017156121335761213361207e565b816040528281528a602084870101111561214c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561218357600080fd5b61218c83611d54565b915061219a60208401611d54565b90509250929050565b600181811c908216806121b757607f821691505b6020821081036121d757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161226857612268612240565b5060010190565b601f8211156105f757600081815260208120601f850160051c810160208610156122965750805b601f850160051c820191505b818110156122b5578281556001016122a2565b505050505050565b815167ffffffffffffffff8111156122d7576122d761207e565b6122eb816122e584546121a3565b8461226f565b602080601f83116001811461232057600084156123085750858301515b600019600386901b1c1916600185901b1785556122b5565b600085815260208120601f198616915b8281101561234f57888601518255948401946001909101908401612330565b508582101561236d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351612426818460208801611cd8565b83519083019061243a818360208801611cd8565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061247690830184611cfc565b9695505050505050565b60006020828403121561249257600080fd5b81516116de81611ca5565b8181038181111561042357610423612240565b8082018082111561042357610423612240565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220512e584a450d156b2a7501235b4488a6524e2e5f1ef4de4fc2dc932299e644b064736f6c63430008130033\n";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNFROM = "burnFrom";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETTOKENINFO = "getTokenInfo";

    public static final String FUNC_GETTOKENSURIS = "getTokensURIs";

    public static final String FUNC_GETUSERTOKENS = "getUserTokens";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MAINTAINERS = "maintainers";

    public static final String FUNC_MINTTO = "mintTo";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETMAINTAINER = "setMaintainer";

    public static final String FUNC_SETTOKENURI = "setTokenURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected SimpleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SimpleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SimpleNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SimpleNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnFrom(String payer, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_BURNFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, payer), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TokenInfo> getTokenInfo(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETTOKENINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<TokenInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, TokenInfo.class);
    }

    public RemoteFunctionCall<List> getTokensURIs(List<BigInteger> tokenIds) {
        final Function function = new Function(FUNC_GETTOKENSURIS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getUserTokens(String user) {
        final Function function = new Function(FUNC_GETUSERTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> maintainers(String param0) {
        final Function function = new Function(FUNC_MAINTAINERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintTo(String receiver, BigInteger tokenId,
            String tokenURI) {
        final Function function = new Function(
                FUNC_MINTTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaintainer(String maintainer,
            Boolean shouldBeMaintainer) {
        final Function function = new Function(
                FUNC_SETMAINTAINER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, maintainer), 
                new org.web3j.abi.datatypes.Bool(shouldBeMaintainer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTokenURI(BigInteger tokenId,
            String tokenURI_) {
        final Function function = new Function(
                FUNC_SETTOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final Function function = new Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SimpleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new SimpleNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SimpleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SimpleNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SimpleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new SimpleNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SimpleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SimpleNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SimpleNFT> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(SimpleNFT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<SimpleNFT> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(SimpleNFT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SimpleNFT> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(SimpleNFT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SimpleNFT> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(SimpleNFT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class TokenInfo extends DynamicStruct {
        public BigInteger tokenId;

        public String tokenURI;

        public String owner;

        public TokenInfo(BigInteger tokenId, String tokenURI, String owner) {
            super(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                    new org.web3j.abi.datatypes.Utf8String(tokenURI), 
                    new org.web3j.abi.datatypes.Address(160, owner));
            this.tokenId = tokenId;
            this.tokenURI = tokenURI;
            this.owner = owner;
        }

        public TokenInfo(Uint256 tokenId, Utf8String tokenURI, Address owner) {
            super(tokenId, tokenURI, owner);
            this.tokenId = tokenId.getValue();
            this.tokenURI = tokenURI.getValue();
            this.owner = owner.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
